generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  category_id Int    @id @default(autoincrement())
  name        String @db.VarChar
  items       Item[]
  @@map("categories")
}

model Item {
  item_id         Int            @id @default(autoincrement())
  seller_id       String         @db.VarChar
  name            String         @db.VarChar(50)
  description     String         @db.VarChar
  price           Int
  status_id       Int
  shipping_way_id Int
  category_id     Int
  ends_at         DateTime       @db.Timestamp(6)
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  deleted_at      DateTime?      @db.Timestamp(6)
  seller          User           @relation(fields: [seller_id], references: [rut], onDelete: NoAction, onUpdate: NoAction)
  shippingWay     ShippingWay    @relation(fields: [shipping_way_id], references: [shipping_way_id], onDelete: NoAction, onUpdate: NoAction)
  category        Category       @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  status          ItemStatuses   @relation(fields: [status_id], references: [status_id], onDelete: NoAction, onUpdate: NoAction)
  images          ItemImages[]
  offers          ItemOffers[]
  orders          Order?
  @@map("items")
}

model ItemImages {
  item_image_id Int      @id @default(autoincrement())
  item_id       Int
  image_url     String   @db.VarChar
  uploaded_date DateTime @default(now()) @db.Timestamp(6)
  items         Item    @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  @@map("items_images")
}

model ItemOffers {
  offer_id   Int       @id @default(autoincrement())
  item_id    Int
  user_id    String    @db.VarChar
  amount     Int
  created_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  item       Item     @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  user       User     @relation(fields: [user_id], references: [rut], onDelete: NoAction, onUpdate: NoAction)
  @@map("items_offers")
}

model ItemStatuses {
  status_id Int     @id @default(autoincrement())
  name      String  @db.VarChar
  items     Item[]
  @@map("items_statuses")
}

model OrderStatuses {
  status_id Int    @id @default(autoincrement())
  name      String @db.VarChar
  @@map("order_statuses")
}

model Order {
  item_id      Int      @id
  buyer_id     String   @db.VarChar
  amount_payed Int
  order_date   DateTime @default(now()) @db.Timestamp(6)
  users        User    @relation(fields: [buyer_id], references: [rut], onDelete: NoAction, onUpdate: NoAction)
  items        Item    @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  @@map("orders")
}

model ShippingWay {
  shipping_way_id Int     @id @default(autoincrement())
  name            String  @db.VarChar
  items           Item[]
  @@map("shipping_ways")
}

model User {
  rut          String         @id @db.VarChar
  name         String         @db.VarChar(50)
  last_name    String         @db.VarChar(50)
  username     String         @db.VarChar(20)
  password     String         @db.VarChar
  email        String         @unique @db.VarChar(250)
  phone        String         @db.VarChar(15)
  avatar_url   String?         @db.VarChar(50)
  token        String?        @db.VarChar
  created_on   DateTime       @default(now()) @db.Timestamp(6)
  deleted_at   DateTime?      @db.Timestamp(6)
  last_login   DateTime?      @db.Timestamp(6)
  items        Item[]
  items_offers ItemOffers[]
  orders       Order[]
  @@map("users")
}
