generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  category_id Int    @id @default(autoincrement())
  name        String @db.VarChar
  items       Item[]
  @@map("categories")
}

model Item {
  item_id         Int            @id @default(autoincrement())
  seller_id       String         @db.VarChar
  name            String         @db.VarChar(50)
  description     String         @db.VarChar
  price           Int
  status_id       Int
  shipping_way_id Int
  category_id     Int
  ends_at         DateTime       @db.Timestamp(6)
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  deleted_at      DateTime?      @db.Timestamp(6)
  seller          User           @relation(fields: [seller_id], references: [rut], onDelete: NoAction, onUpdate: NoAction)
  shippingWay     ShippingWay    @relation(fields: [shipping_way_id], references: [shipping_way_id], onDelete: NoAction, onUpdate: NoAction)
  category        Category       @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  status          ItemStatus   @relation(fields: [status_id], references: [status_id], onDelete: NoAction, onUpdate: NoAction)
  images          ItemImage[]
  offers          ItemOffer[]
  @@map("items")
}

model ItemImage {
  item_image_id      Int       @id @default(autoincrement())
  item_id            Int
  image_url          String    @db.VarChar
  uploaded_date      DateTime  @default(now()) @db.Timestamp(6)
  item               Item      @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  @@map("items_images")
}

model ItemOffer {
  offer_id        Int       @id @default(autoincrement())
  item_id         Int
  user_id         String    @db.VarChar
  amount          Int
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  deleted_at      DateTime? @db.Timestamp(6)
  item            Item     @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  user            User     @relation(fields: [user_id], references: [rut], onDelete: NoAction, onUpdate: NoAction)
  order           Order[]
  users_strikes   UserStrike[]
  @@map("items_offers")
}

model ItemStatus {
  status_id Int     @id @default(autoincrement())
  name      String  @db.VarChar
  items     Item[]
  @@map("items_statuses")
}

model OrderStatus {
  status_id Int    @id @default(autoincrement())
  name      String @db.VarChar
  @@map("order_statuses")
}

model Order {
  order_id     String        @id @default(uuid())
  offer_id     Int           
  is_payed     Boolean       @default(false) 
  checkout_id  String?       @db.VarChar @unique
  expires_at   DateTime      @db.Timestamp(6)
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  offer        ItemOffer     @relation(fields: [offer_id], references: [offer_id], onDelete: NoAction, onUpdate: NoAction)
  @@map("orders")
}

model ShippingWay {
  shipping_way_id Int     @id @default(autoincrement())
  name            String  @db.VarChar
  items           Item[]
  @@map("shipping_ways")
}

model UserStrike {
  user_id      String
  offer_id     Int           
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  deleted_at   DateTime?     @db.Timestamp(6)
  User         User          @relation(fields: [user_id], references: [rut])
  ItemOffers   ItemOffer     @relation(fields: [offer_id], references: [offer_id])
  @@id([user_id, offer_id])
  @@map("users_strikes")
}

model User {
  rut          String         @id @db.VarChar
  name         String         @db.VarChar(50)
  last_name    String         @db.VarChar(50)
  username     String         @db.VarChar(20)
  password     String         @db.VarChar
  email        String         @unique @db.VarChar(250)
  phone        String         @db.VarChar(15)
  avatar_url   String?        @db.VarChar(50)
  token        String?        @db.VarChar
  created_on   DateTime       @default(now()) @db.Timestamp(6)
  deleted_at   DateTime?      @db.Timestamp(6)
  last_login   DateTime?      @db.Timestamp(6)
  is_banned    Boolean        @default(false)

  items        Item[]
  offers       ItemOffer[]
  strikes      UserStrike[]
  preferences  UserPreference?
  addresses    UserAddress[]
  @@map("users")
}

model UserPreference {
  user_id                     String
  accepts_crypto_payments     Boolean       @default(false)
  email_notifications         Boolean       @default(true)
  User                        User         @relation(fields: [user_id], references: [rut])
  @@id([user_id])
  @@map("users_preferences")
}

model UserAddress {
  id                          Int             @id @default(autoincrement())
  user_id                     String
  street                      String
  number                      String
  city                        String
  comuna                      String
  aditional_instructions      String?
  user                        User            @relation(fields: [user_id], references: [rut])

  @@map("users_addresses")
}

 